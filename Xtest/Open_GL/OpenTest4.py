'''
Created on Jul 29, 2014

@author: fran_re
'''

from PySide import QtCore, QtGui, QtOpenGL
from PySide.QtOpenGL import *
from pylab import *
import vector3D
from OpenGL.contextdata import setValue

try:
    from OpenGL import GL,GLU, GLUT
except ImportError:
    app = QtGui.QApplication(sys.argv)
    QtGui.QMessageBox.critical(None, "OpenGL hellogl",
                            "PyOpenGL must be installed to run this example.",
                            QtGui.QMessageBox.Ok | QtGui.QMessageBox.Default,
                            QtGui.QMessageBox.NoButton)
    sys.exit(1)

class ShapeNames:
    dict = {0:"dreieck", 1:"viereck", 2:"stern"}
       
    def getKey(self, key):
        return self.dict.get(key)
    
    def getValue(self, value):
        try:
            return self.dict.keys()[self.dict.values().index(value)]
        except ValueError:
            return None  
        
        

class WfWidget(QtOpenGL.QGLWidget):
    def __init__(self, parent = None):
        super(WfWidget, self).__init__(parent)

    def drawTriangle(self):         
        GL.glBegin(GL.GL_TRIANGLES);
        GL.glVertex3f(1,0,0);
        GL.glVertex3f(0,1,0);
        GL.glVertex3f(0,0,1);
        GL.glEnd;   
 
    def initializeGL(self):
        GLUT.glutInit()

    def mousePressEvent(self, event):
        print "mousePress ok!"
        self.mousePressPos = QtCore.QPointF(event.pos())
        print str(self.mousePressPos) 
       # self.createMouseRay()
        res = ShapeNames().getValue(self.selection())
        if res != None:       
            print "Sie haben auf ' + str() + ' geklickt!"
        else:
            print "Nix geklickt"

    
    #------------------------------------------------- def resizeGL(self, w, h):
        #------------------------------------------------------ side = min(w, h)
        #--------------------------------------------- GL.glViewport(0, 0, w, h)
        
    def setValues(self):
        self.viewport = GL.glGetIntegerv(GL.GL_VIEWPORT)
        self.puffer = GL.glSelectBuffer(256)
        GL.glMatrixMode(GL.GL_PROJECTION)      #In den Projektionsmodus
        GL.glLoadIdentity()
      #  GLU.gluPickMatrix(self.mousePressPos.x(), self.viewport[3]-self.mousePressPos.y(), 10.0, 10.0, self.viewport)
        GLU.gluPerspective(60.0, self.viewport[2]/self.viewport[3], 1, 256)
        GL.glMatrixMode(GL.GL_MODELVIEW)
        
#------------------------------------------------------------------------------ 
#------------------------------------------------------------------------------ 
        # GL.glRenderMode(GL.GL_SELECT)          #In den Selectionsmodus schalten
     #-- #   GL.glPushMatrix()                      #Um unsere Matrix zu sichern
                            #------------- #Und dieselbige wieder zurueckzusetze
         #------------------------------------ GL.glMatrixMode(GL.GL_PROJECTION)
#------------------------------------------------------------------------------ 
#------------------------------------------------------------------------------ 
    def paintGL(self):
        
        self.setValues()
       
        GL.glClearColor(0.0, 0.0, 0.0, 0.0)
        GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
      #  GL.glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0)

        GL.glInitNames
        GL.glPushName(0)

        GL.glColor3f(1.0, 0.0, 0.0)
        GL.glLoadName(ShapeNames().getValue("dreieck"))
        GL.glBegin(GL.GL_TRIANGLES)
        GL.glVertex3f(-0.5, 1, 0)
        GL.glVertex3f(0.5, 1, 0)
        GL.glVertex3f(0, 2, 0)
        GL.glEnd()

        #GL.glPopName()

        GL.glColor3f(0,1,0);
        GL.glLoadName(ShapeNames().getValue("viereck"))
        GL.glBegin(GL.GL_QUADS)
        GL.glVertex3f(-1,0,0)
        GL.glVertex3f(-2,0,0)
        GL.glVertex3f(-2,-1,0)
        GL.glVertex3f(-1,-1,0)
        GL.glEnd()


        GL.glColor3f(1,1,0)
        GL.glLoadName(ShapeNames().getValue("stern"))
        GL.glBegin(GL.GL_TRIANGLES)
        GL.glVertex3f(1,0,0)
        GL.glVertex3f(2,0,0)
        GL.glVertex3f(1.5,-1,0)
        GL.glVertex3f(1,-0.65,0)
        GL.glVertex3f(2,-0.65,0)
        GL.glVertex3f(1.5,0.35,0)
        GL.glEnd()

     #   GL.glFlush()
                

    def selection(self):
 
        GL.glMatrixMode(GL.GL_PROJECTION)      #In den Projektionsmodus
        GL.glLoadIdentity()
        GLU.gluPickMatrix(self.mousePressPos.x(), self.viewport[3]-self.mousePressPos.y(), 10.0, 10.0, self.viewport)
        GLU.gluPerspective(60.0, self.viewport[2]/self.viewport[3], 1, 256)
        GL.glMatrixMode(GL.GL_MODELVIEW) 
             
        #GL.glPopMatrix
        treffer = GL.glRenderMode(GL.GL_RENDER) #Anzahl der Treffer auslesen
        getroffen = sys.maxint                  #Hoechsten moeglichen Wert annehmen
        z_wert   = sys.maxint

        print treffer
        print self.puffer
        
        for i in range(0, treffer+1):
            print "jier"
            if self.puffer[i*4+1] < z_wert :
                print "dfdf"
                getroffen   = self.puffer[i*4+3]
                z_wert      = self.puffer[i*4+1]

            
        if getroffen == sys.maxint:
           result = -1
        else:
           result = getroffen
           
           
                
        return result
    
            


if __name__ == '__main__':
    app = QtGui.QApplication(["Winfred's PyQt OpenGL"])
    widget = WfWidget()
    widget.show()
    app.exec_()