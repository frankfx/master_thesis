from PySide import QtCore, QtGui, QtOpenGL
from PySide.QtOpenGL import *
from pylab import *
import vector3D


try:
    from OpenGL import GL,GLU, GLUT
except ImportError:
    app = QtGui.QApplication(sys.argv)
    QtGui.QMessageBox.critical(None, "OpenGL hellogl",
                            "PyOpenGL must be installed to run this example.",
                            QtGui.QMessageBox.Ok | QtGui.QMessageBox.Default,
                            QtGui.QMessageBox.NoButton)
    sys.exit(1)

class WfWidget(QtOpenGL.QGLWidget):
    def __init__(self, parent = None):
        super(WfWidget, self).__init__(parent)

    def drawTriangle(self):
        GL.glBegin(GL.GL_TRIANGLES)
        GL.glVertex2f(-0.15, -0.15)
        GL.glVertex2f(0.15, -0.15)
        GL.glVertex2f(0.0, 0.15)
        GL.glEnd()
 
    def initializeGL(self):
        GLUT.glutInit()
    
    def resizeGL(self, w, h):
        side = min(w, h)
        GL.glViewport(0, 0, w, h) 
        
    def mousePressEvent(self, event):
        print "mousePress ok!"
        self.mousePressPos = QtCore.QPointF(event.pos())
        print str(self.mousePressPos) 
        self.createMouseRay()   
        
    def createMouseRay(self):
        print "al"        

        matModelView    = GL.glGetDoublev(GL.GL_MODELVIEW_MATRIX)
        matProjection   = GL.glGetDoublev(GL.GL_PROJECTION_MATRIX)
        viewport        = GL.glGetIntegerv(GL.GL_VIEWPORT)
        winX            = self.mousePressPos.x()
        winY            = viewport[3] - self.mousePressPos.y()
        start           = vector3D.Vector3d()
        end             = vector3D.Vector3d()
        
        GL.glMatrixMode(GL.GL_PROJECTION)
        GL.glLoadIdentity
        
        

        print self.mousePressPos.x()
        print self.mousePressPos.y()
        print winX
        print winY
        
        print start
        start.x, start.y, start.z   = GLU.gluUnProject(winX, winY, 0.0, matModelView, matProjection, viewport)
        # end.x, end.y, end.z         = GLU.gluUnProject(winX, winY, 1.0, matModelView, matProjection, viewport)
        print start
        print end
        
        
       
        
              
        
    def paintGL(self):
        GL.glClearColor(0.0, 0.0, 0.0, 0.0)
        GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
        GL.glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0)
        GL.glLoadIdentity()
        GL.glColor3f(1.0, 1.0, 1.0)

        self.drawTriangle();

        GL.glColor3f(0.0, 0.0, 1.0)
        GL.glScalef(0.5, 0.5, 0.0); # resize to 50%
        self.drawTriangle()

        GL.glColor3f(1.0, 0.0, 0.0)
        GL.glRotatef(45.0, 0.0, 0.0, 1.0) #rotate 45 degrees
        self.drawTriangle()

        GL.glColor3f(0.0, 1.0, 0.0)
        GL.glTranslatef(0.5, 0.5, 0.0) # translate
        self.drawTriangle()

        GL.glFlush()
        

if __name__ == '__main__':
    app = QtGui.QApplication(["Winfred's PyQt OpenGL"])
    widget = WfWidget()
    widget.show()
    app.exec_()
